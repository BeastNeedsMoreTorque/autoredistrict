/*
 * import com.jacob.activeX.ActiveXComponent; import com.jacob.com.*; import java.util.Vector; public class ExcelOBJbak extends Dispatch { public Dispatch d = null; public ActiveXComponent app = null; public ExcelOBJbak parent = null; Vector subs = new Vector(); static int cell_dispid; static int value_dispid; //CONSTRUCTORS ExcelOBJbak() { } ExcelOBJbak( Dispatch d) { this.d = d; } ExcelOBJbak( String s) { init(); d = Workbooks().Open(s).d; } //MISC public int getCount() { return get(d,"Count").toInt(); } //APPS public void init() { d = app = new ActiveXComponent("Excel.Application"); } public ExcelOBJbak Workbooks() { return addsub( get(d, "Workbooks").toDispatch()); } public ExcelOBJbak New() { init(); return Workbooks().Add(); } public ExcelOBJbak New( String s) { init(); return Workbooks().Add(s); } public void Print() { call( call( app, "Dialogs", new Variant(8)).toDispatch(), "Show"); } public void Calculate() { call( app, "Calculate"); } public void Quit() { System.out.println( "ending Excel App"); releaseAll(); app.invoke("Quit", new Variant[]{}); //d.release(); try { ComThread.Release(); } catch (Exception e) { System.out.println("couldn't release:"+e); return; } System.out.println( "Excel App ended."); } //WORKBOOKS public ExcelOBJbak Open(String s) { return addsub(call(d,"Open", new Variant(s)).toDispatch()); } public ExcelOBJbak Add() { return addsub(call(d,"Add").toDispatch()); } public ExcelOBJbak Add(String s) { return addsub(call(d,"Add", new Variant(s)).toDispatch()); } public void Save() { call(d, "Save"); } public void SaveAs(String s) { call(d, "SaveAs", new Variant(s)); } public void Close() { Close(false); } public void Close(boolean b) { call(d, "Close", new Variant(b)); if( app != null) Quit(); } public ExcelOBJbak Worksheets(String s) { ExcelOBJbak ws = addsub(call(d,"Worksheets", new Variant(s)).toDispatch()); try { cell_dispid = ws.getIDOfName(ws.d,"Cells"); value_dispid = ws.getIDOfName(ws.call(d,cell_dispid, new Variant(1), new Variant(1)).toDispatch(),"Value"); } catch (Exception ex) { } return ws; } public ExcelOBJbak Worksheets(int i) { ExcelOBJbak ws = addsub(call(d,"Worksheets", new Variant(i)).toDispatch()); try { cell_dispid = ws.getIDOfName(ws.d,"Cells"); value_dispid = ws.getIDOfName(ws.call(d,cell_dispid, new Variant(1), new Variant(1)).toDispatch(),"Value"); } catch (Exception ex) { } return ws; } //optimized public String read(int i, int j) { return get(call(d,cell_dispid, new Variant(i), new Variant(j)).toDispatch(),value_dispid).toString(); } public void write(int i, int j, String s) { put(call(d,cell_dispid, new Variant(i), new Variant(j)).toDispatch(),value_dispid, new Variant(s)); } //WORKSHEETS public ExcelOBJbak Columns() { return addsub(call(d,"Columns").toDispatch()); } public ExcelOBJbak Columns(int i) { return addsub(call(d,"Columns", new Variant(i)).toDispatch()); } public void PrintNoDialog() { call(d, "PrintOut"); } //COLUMNS public void AutoFit() { call(d, "AutoFit"); } public void setColumnWidth(int i) { put(d, "ColumnWidth", new Variant(i)); } public ExcelOBJbak Rows() { return addsub(call(d,"Rows").toDispatch()); } public ExcelOBJbak Rows(int i) { return addsub(call(d,"Rows", new Variant(i)).toDispatch()); } //ROWS public void setRowHeight(int i) { put(d, "RowHeight", new Variant(i)); } public ExcelOBJbak Cells(int i, int j) { return new ExcelOBJbak(call(d,"Cells", new Variant(i), new Variant(j)).toDispatch()); } public ExcelOBJbak Range(String s) { return addsub(call(d,"Range", new Variant(s)).toDispatch()); } //CELLS OR RANGE public void setValue(Variant v) { put(d, "Value", v); } public void setValue(String s) { put(d, "Value", new Variant(s)); } public void setValue(int i) { put(d, "Value", new Variant(i)); } public Variant getValue() { return get(d,"Value"); } public Variant Value() { return get(d,"Value"); } public void setFormula(String s) { put(d, "Formula", new Variant(s)); } public Variant getFormula() { return get(d, "Formula"); } public Variant Formula() { return get(d, "Formula"); } public String toString() { return get(d,"Value").toString(); } public void setNumberFormat(String v) { put(d,"NumberFormat", v); } public String getNumberFormat() { return get(d,"NumberFormat").toString(); } public void setHorizontalAlignment(int i) { put(d, "HorizontalAlignment", new Variant(i)); } public int getHorizontalAlignment() { return get(d, "HorizontalAlignment").toInt(); } final static int ALIGN_LEFT = -4131, ALIGN_CENTER = -4108, ALIGN_RIGHT = -4152, ALIGN_GENERAL=1; public void setInteriorColor(int i) { put( call(d, "Interior").toDispatch(), "Color", new Variant(i)); } public void setInteriorColorIndex(int i) { put( call(d, "Interior").toDispatch(), "ColorIndex", new Variant(i)); } public int getInteriorColor() { return get( call(d, "Interior").toDispatch(), "Color").toInt(); } public int getInteriorColorIndex() { return get( call(d, "Interior").toDispatch(), "ColorIndex").toInt(); } public ExcelOBJbak Font() { return addsub(call(d,"Font").toDispatch()); } //FONT public void setName(String s) { put(d, "Name", new Variant(s)); } public String getName() { return get(d, "Name").toString(); } public void setSize(int i) { put(d, "Size", new Variant(i)); } public void setBold(boolean b) { put(d, "Bold", new Variant(b)); } public void setItalic(boolean b) { put(d, "Italic", new Variant(b)); } public void setColor(int i) { put(d, "Color", new Variant(i)); } // HEX: 0x00RRGGBB public int getColor() { return get(d, "Color").toInt(); } public int getColorIndex() { return get( d, "ColorIndex").toInt(); } public ExcelOBJbak Borders() { return addsub(call(d,"Borders").toDispatch()); } public ExcelOBJbak Borders(int i) { return addsub(call(d,"Borders", new Variant(i)).toDispatch()); } //1 to 10 final static int LEFT=7,RIGHT=10,TOP=8,BOTTOM=9,DIAG_DOWN=5,DIAG_UP=6; //BORDERS public void setWeight(int i) { put(d,"Weight", new Variant(i)); } public int getWeight() { return get(d,"Weight").toInt(); } final static int NORMAL = 2, LIGHT = 1, MEDUIM = -4138, HEAVY = 4; public void setLineStyle(int i) { put(d,"LineStyle", new Variant(i)); } public int getLineStyle() { return get(d,"LineStyle").toInt(); } final static int NONE = -4142, SOLID=1, DOTTED=-4118, DASHED=-4115, DOUBLED=-4119; //SPECIAL public ExcelOBJbak addsub( Dispatch d0) { ExcelOBJbak newsub = new ExcelOBJbak(d0); newsub.parent = this; subs.add(newsub); return newsub; } public void releaseAll() { for( int i = 0; i < subs.size(); i++) { ((ExcelOBJbak) subs.get(i)).releaseAll(); //((ExcelOBJbak) subs.get(i)).d.release(); } } }
 */